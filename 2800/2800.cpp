// 2800 ?? ??
#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
using namespace std;
string str;
vector<int> symbol;
vector<pair<int, int>> p;
vector<int> visit;
void check(int i, int Count);
map<string, int> m;
int main()
{
    cin >> str;
    for (int i = 0; i < str.length(); i++)
    {
        if (str[i] == '(')
        {
            symbol.push_back(i); //?? ??? index? ??.
        }
        else if (str[i] == ')')
        {
            //?? ??? symbol? ??? ?? ??? index?? ?? ?? ??? ??? ??? ?? ???? ???
            //??? index? pair? ???.
            int num = symbol[symbol.size() - 1];
            symbol.pop_back();
            p.push_back(make_pair(num, i));
        }
    }
    visit.resize(str.length(), 0); // visit? size? str? ???? ?????.
    check(0, 0);
    for (auto iter = m.begin(); iter != m.end(); iter++) // map?? ???? ???? ????, first? ?? ???.
    {
        cout << iter->first << endl;
    }
}
void check(int i, int Count)
{
    if (Count > 0)
    {
        string s = "";
        for (int j = 0; j < visit.size(); j++)
        {
            if (visit[j] == true)
                continue; // true?? ???? ??x
            else
            {
                s += str[j]; //?? ?????? ?? ???? ?? ???.
            }
        }
        m.insert(make_pair(s, 1)); //??? ?????? ??? ???? ??? ????, map? ???.
    }
    for (int k = i; k < p.size(); k++)
    {
        if (visit[p[k].first] == true && visit[p[k].second] == true) //?? ?? ?? ??? ??? ???.
        {                                                            //?? ??? ????
            continue;
        }
        //??? ???? ??? ???
        visit[p[k].first] = true;
        visit[p[k].second] = true;
        check(k, Count + 1);
        //??? ?? ???? ???
        visit[p[k].first] = false;
        visit[p[k].second] = false;
    }
}